# Workflow name
name: Backend Continuous Integration

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:


  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main


# Jobs defined in the workflow
jobs:
  backend-lint-and-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Debug message
        run: cd starter/frontend && echo pwd

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-

     

      # Install the dependencies.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      # - name: Install the dependencies
      #  run:  cd starter/backend && npm ci

      # Run the linter.
      - name: Run Flake8
        run: |
          flake8 .
      #- name: Run the linter
      #  run:  cd starter/backend && npm run lint
       
      # Run the tests.
     # - name: Run tests
     #   run: cd starter/backend && npm test

  backend-build-job:
    runs-on: ubuntu-latest
    needs: backend-lint-and-test-job #dependent job
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Build docker frontend image #Tag the built docker image with the git sha (use GitHub Context)
        #if: github.ref == 'refs/heads/main'
        run: cd starter/backend && docker build --tag=mp-backend:latest .

     # - name: Run docker image
      #  run: docker run --name mp-frontend -p 3000:3000 -d mp-frontend

      #TODO: Push the image to ECR
      #TODO: Apply the Kubernetes manfiests using the image tag from build