# Workflow name
name: Frontend Continuous Deployment


# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  # Trigger only when Frontend Continuous Integration is completed
  workflow_run:
    workflows: ["Frontend Continuous Integration"]
    types:
      - completed


  push:
   
    branches: 
      - main


env:
  
    BASE_IMAGE_NAME: "backend"
    AWS_REGION: ${{ vars.AWS_REGION }}
    ECR_REPOSITORY: ${{vars.ECR_REPOSITORY_BACKEND}}
   

# Jobs defined in the workflow
jobs:
  frontend-cd-lint-and-test-job:
    uses: ./.github/workflows/frontend-lint-test-resuable.yaml #Invoke reusable Backend Lint and Test workflow

  frontend-cd-build-job:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Job execute after dependent job complete successfully

    needs: frontend-cd-lint-and-test-job #dependent job
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

        #Configure AWS credentials and Login to ECR
      - name: Configure AWS credentials
        id: aws-setup
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}} 
    

    
      - name: Build, Tag and Push image to Amazon ECR #Tag the built docker image with the git sha (use GitHub Context)
        env:
          ECR_REGISTRY: ${{steps.aws-setup.outputs.ecr_registry }}
          IMAGE_TAG: ${{env.BASE_IMAGE_NAME}}-${{ needs.frontend-cd-lint-and-test-job.outputs.sha_short }}
        run: |
          cd starter/frontend 
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=$ECR_REGISTRY/${{env.ECR_REPOSITORY}}:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/${{env.ECR_REPOSITORY}}:$IMAGE_TAG

          echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV
          echo ECR_REGISTRY=$ECR_REGISTRY >> $GITHUB_ENV


      #Deploy to EKS Cluster
   
      - name: EKS Cluster
        run: |
          
          aws eks update-kubeconfig --name cluster --region ${{env.AWS_REGION}}
          #./setup/init.sh
          cd starter/frontend/k8s
       
          kustomize edit set image frontend=$ECR_REGISTRY/${{env.ECR_REPOSITORY}}:$IMAGE_TAG

          # Apply the manifests to the cluster
          kustomize build | kubectl apply -f -

       
