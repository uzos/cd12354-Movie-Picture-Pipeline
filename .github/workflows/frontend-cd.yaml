# Workflow name
name: Frontend Continuous Deployment
needs: [frontend-cd-test-and-build]

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events to the main branch

  pull_request:
    types:
      - closed
    branches: 
      - main

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    ECR_REPOSITORY: ${{vars.ECR_REPOSITORY_FRONTEND}}
    REACT_APP_MOVIE_API_URL: $${{vars.REACT_APP_MOVIE_API_URL}}

# Jobs defined in the workflow
jobs:
  call-frontend-cd-lint-and-test-job:
          uses: ./.github/workflows/frontend-lint-test-resuable.yaml
  
  frontend-cd-build-job:
    needs: frontend-cd-lint-and-test-job #dependent job
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:

      - name: Get Git Sha
        id: git-sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT



      #Setup docker 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build docker frontend image #Tag the built docker image with the git sha (use GitHub Context)
        if: github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.git-sha.outputs.sha_short }}
        run: cd starter/frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

         #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }} -f .

      - name: Configure AWS credentials
      #Login to AWS using secrets

      - name: AWS Login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          
          IMAGE_TAG: ${{ steps.git-sha.outputs.sha_short }}
        run: |
          #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }} -f .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       
      #- name: Deploy to EKS Cluster
       # run: 