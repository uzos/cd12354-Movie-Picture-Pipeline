# Workflow name
name: Frontend Continuous Deployment
#needs: [frontend-cd-test-and-build]

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  workflow_run:
    workflows: ["Frontend Continuous Integration"]
    types:
      - completed

  # Automatic trigger on pull request event against main branch is closed (i.e )
  pull_request:
    types:
      - closed
    branches: 
      - main



  

env:
  
    BASE_IMAGE_NAME: "frontend"
    AWS_REGION: ${{ vars.AWS_REGION }}
    ECR_REPOSITORY: ${{vars.ECR_REPOSITORY_FRONTEND}}
    REACT_APP_MOVIE_API_URL: $${{vars.REACT_APP_MOVIE_API_URL}}

# Jobs defined in the workflow
jobs:
  frontend-cd-lint-and-test-job:
    uses: ./.github/workflows/frontend-lint-test-resuable.yaml #Invoke reusable Frontend Lint and Test workflow

  frontend-cd-build-job:
    #if: ${{ github.event.workflow_run.conclusion == 'success' }} # Job execute after dependent job complete successfully

    #if: github.event.pull_request.merged == true && ${{ github.event.workflow_run.conclusion == 'success' }} # Job execute after dependent job complete successfully
    needs: frontend-cd-lint-and-test-job #dependent job
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        id: aws-setup
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}  # Specify your desired AWS region
     
  

   

      - name: Print message -  IMAGE_TAG
        env: 
          IMAGE_TAG: ${{env.BASE_IMAGE_NAME}}-${{ needs.frontend-cd-lint-and-test-job.outputs.sha_short }}
          ECR_REGISTRY: ${{steps.aws-setup.outputs.ecr_registry }}
        run: echo  ${{github.event.workflow_run.conclusion}}

      - name: Build, Tag and Push image to Amazon ECR #Tag the built docker image with the git sha (use GitHub Context)
        env:
          ECR_REGISTRY: ${{steps.aws-setup.outputs.ecr_registry }}
          IMAGE_TAG: ${{env.BASE_IMAGE_NAME}}-${{ needs.frontend-cd-lint-and-test-job.outputs.sha_short }}
        run: |
          cd starter/frontend 
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=$ECR_REGISTRY/${{env.ECR_REPOSITORY}}:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/${{env.ECR_REPOSITORY}}:$IMAGE_TAG


      #- name: Deploy to EKS Cluster
       # run: 
      - name: Deploy to EKS Cluster
        run: |
          echo kubectl version
          cd starter/frontend/k8s
          ./setup/init.sh
          #echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          #kubectl apply -f deployment.yml --kubeconfig=kubeconfig.yaml