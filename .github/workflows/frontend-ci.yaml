# Workflow name
name: Frontend Continuous Integration

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events to the main branch
  push:
    branches:
      - main

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main
env:
  # Setting an environment variable with the value of a configuration variable
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY}}
  REACT_APP_MOVIE_API_URL: ${{vars.REACT_APP_MOVIE_API_URL}}
  AWS_REGION: ${{ vars.AWS_REGION}}
#Jobs defined in the workflow
jobs:
  call-frontend-cd-lint-and-test-job:
          uses: ./.github/workflows/frontend-lint-test-resuable.yaml
  


    
  frontend-build-job:
    runs-on: ubuntu-latest
    needs: call-frontend-cd-lint-and-test-job #Only run job if frondend Lint and Test pass
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest


      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT


      #Setup docker 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}



      - name: Print message - reusable-lint-and-test-job.outputs.sha_short
        #run: echo  ${{call-frontend-cd-lint-and-test-job.outputs.sha_short}}
        run: echo  ${{needs.call-frontend-cd-lint-and-test-job.outputs.sha_short}}

       #Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{env.AWS_REGION}}
          mask-aws-account-id: 'false'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
    

      - name: Build docker frontend image #Tag the built docker image with the git sha (use GitHub Context)
        #if: github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{needs.call-frontend-cd-lint-and-test-job.outputs.sha_short}}
        run: cd starter/frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        #run: cd starter/frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=mp-frontend:latest .

      
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      #docker_username: ${{ steps.login-ecr.outputs.docker_username_123456789012_dkr_ecr_us_east_1_amazonaws_com }} # More information on these outputs can be found below in the 'Docker Credentials' section
      #docker_password: ${{ steps.login-ecr.outputs.docker_password_123456789012_dkr_ecr_us_east_1_amazonaws_com }}
      #TODO: Apply the Kubernetes manfiests using the image tag from build